
show databases;
use mavenmovies;
-- 1. **Rank the customers based on the total amount they've spent on rentals.**
with customerRanking as (
select customer_id , sum(amount) as totalAmount,
rank() over(
order by sum(payment.amount) desc) as customer_rank from payment group by customer_id 
)
select customer_id, totalAmount, customer_rank from customerRanking;



with customerRanking as (
select c.customer_id, c.first_name , c.last_name, sum(payment.amount) as totalAmount,
rank() over(
order by sum(payment.amount) desc) as customerRank from customer c join payment on payment.customer_id = c.customer_id
group by customer_id order by customerRank
)
select customer_id, first_name, last_name, totalAmount, customerRank from customerRanking;

select c.customer_id, c.first_name, c.last_name, sum(p.amount) as TotalAmount,
rank() over(
order by sum(p.amount) desc) as customerRank from customer c join payment p on p.customer_id = c.customer_id group by customer_id order by customerRank;





-- 2. **Calculate the cumulative revenue generated by each film over time.**
select * from film; -- film_id 
select * from rental; -- rental_id, inventory_id
select * from payment; -- rental_id, amount, customer_id
select * from inventory; -- inventory_id , film_id;

select f.film_id, f.title, p.payment_date, sum(p.amount) over (
partition by f.film_id order by p.payment_date ) as cumulative_revenue from film f 
join inventory i on i.film_id = f.film_id join rental r on r.inventory_id = i.inventory_id join payment p on
p.rental_id = r.rental_id order by f.film_id, p.payment_date;



--3 **Determine the average rental duration for each film, considering films with similar lengths.**
select * from film;
select film_id , title ,length, rental_duration, avg(rental_duration) over(
partition by length) as avgRentalDuration from film where length is not null;



-- 4. **Identify the top 3 films in each category based on their rental counts.**;

WITH FilmRanking AS (
    SELECT
        f.film_id,
        fi.category_id,
        f.title,
        ca.name,
        RANK() OVER (PARTITION BY fi.category_id ORDER BY COUNT(r.rental_id) DESC) AS Ranking
    FROM film f JOIN film_category fi ON fi.film_id = f.film_id JOIN category ca ON ca.category_id = fi.category_id
    JOIN inventory i ON i.film_id = f.film_id JOIN rental r ON r.inventory_id = i.inventory_id
    GROUP BY f.film_id, fi.category_id, f.title
)
SELECT film_id, category_id, title, name, Ranking FROM FilmRanking WHERE Ranking <= 3;




-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
--      across all customers.**

   with differnceRental as (
   select customer_id, count(rental_id) as total, avg(count(rental_id)) over() as average_rental,
   count(rental_id) - avg(count(rental_id)) over() as difference from rental
   group by customer_id
   )
   select customer_id, total, average_rental,  difference from differnceRental; 
   


-- 6. **Find the monthly revenue trend for the entire rental store over time.**

SELECT staff.store_id, MONTH(p.payment_date) AS payment_month, YEAR(p.payment_date) AS payment_year, SUM(p.amount) AS monthly_revenue,
LEAD(SUM(p.amount), 1) OVER (ORDER BY YEAR(p.payment_date), MONTH(p.payment_date)) AS next_month_revenue
FROM payment p JOIN rental r ON p.rental_id = r.rental_id join staff on staff.staff_id = p.staff_id  GROUP BY payment_month, payment_year, staff.store_id 
ORDER BY payment_year, payment_month;



-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**

with top20Cstmer as (select customer_id, sum(p.amount) as total_spending,  RANK() 
over(order by sum(p.amount) desc) as customer_rank from payment p
group by customer_id 
)
select customer_id , total_spending, customer_rank from top20Cstmer WHERE customer_rank <= 0.2 * (select COUNT(DISTINCT customer_id) from top20Cstmer);


-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

select c.name, c.category_id, count(r.rental_id) as totalrentals, SUM(COUNT(r.rental_id)) 
over(order by count(r.rental_id) desc) as ranking_rental from rental r join inventory i on i.inventory_id = r.inventory_id
join film_category fc on fc.film_id = i.film_id join category c on c.category_id = fc.category_id group by c.category_id;


-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**

with rentedFilms as (
select fc.film_id as film_id, fc.category_id as category_id, count(r.rental_id) as rentalCount,
count(avg(r.rental_id)) over( partition by fc.category_id) as averageRentalCount from film_category fc
join inventory i on i.film_id = fc.film_id join rental r on r.inventory_id = i.inventory_id group by fc.film_id, fc.category_id
)
select film_id, category_id, rentalCount, averageRentalCount from rentedFilms where rentalCount < averageRentalCount;


-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
select * from payment;

with HighestMonthRevenue as(
select monthname(payment_date) as monthname, 
sum(amount) over(order by month(payment_date) desc) as revenue from payment)
select distinct monthname, revenue from HighestMonthRevenue ;











    


 


    
    
 
    
   
   

   
   
   
  
   
   













